---
import type { MarkdownHeading } from 'astro';

type Props = {
  headings: MarkdownHeading[];
};

type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[];
};

const { headings } = Astro.props;

const groupedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }
  return array;
}, [{depth: 1, slug: "title", text: "Description", subheadings: []}] as HeadingWithSubheadings[]);
---

<nav id="table-of-contents" class="toc" aria-label="Table Of Contents">
  <p class="font-medium">On This Page</p>
  <ol class="pl-4 text-md">
    {
      groupedHeadings.map((h) => (
        <li class="pt-2 mt-0">
          <a href={`#${h.slug}`}>{h.text}</a>
          {h.subheadings.length > 0 && (
            <ol class="pl-4">
              {h.subheadings.map((sub) => (
                <li class="pt-2 mt-0">
                  <a href={`#${sub.slug}`}>{sub.text}</a>
                </li>
              ))}
            </ol>
          )}
        </li>
      ))
    }
  </ol>
  <svg class="text-black -translate-x-2 pointer-events-none dark:text-white toc-progress" xmlns="http://www.w3.org/2000/svg">
      <path
        class="toc-marker"
        fill="none"
        stroke="currentColor"
        stroke-width="4"
        stroke-dasharray="1 0 0 1000"
        stroke-dashoffset="1"
        stroke-linecap="round"
        stroke-linejoin="round"
      ></path>
    </svg>
</nav>

<script is:inline>
// Create some WeakMaps to store the distances to the top and
// bottom of each link
if (!document.linkStarts) {
  document.linkStarts = new WeakMap();
}

if (!document.linkEnds) {
  document.linkEnds = new WeakMap();
}

addIntersectionObserver();
addResizeObserver();

document.addEventListener('astro:after-swap',
  () => { 
    linkStarts = new WeakMap();
    linkEnds = new WeakMap();
    addIntersectionObserver();
    addResizeObserver();
  }
)

function addIntersectionObserver() {
  const observer = new IntersectionObserver((sections) => {
    sections.forEach((section) => {
      var heading = section.target.querySelector("h1, h2, h3, h4, h5");
      if (!heading) return;
      const id = heading.getAttribute("id");

      // Get the link to this section's heading
      const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
      if (!link) return;

      // Add/remove the .active class based on whether the
      // section is visible
      const addRemove = section.intersectionRatio > 0 ? "add" : "remove";
      link.classList[addRemove]("active");
    });
    updatePath();
  }, { rootMargin: "-80px 0px 0px 0px"});

  // Observe all the sections of the article
  document.querySelectorAll("article section").forEach((section) => {
    observer.observe(section);
  });
}

function addResizeObserver() {
  if (!document.querySelector("nav.toc")) return;
  const observer = new ResizeObserver(() => {
    drawPath();
    updatePath();
  });
  observer.observe(document.querySelector("nav.toc"));
}

function drawPath() {
  const path = document.querySelector("path.toc-marker");
  const links = Array.from(document.querySelectorAll("nav.toc a"));
  if (!links.length) return;

  // Start with an empty array of path data values (joined with
  // spaces later)
  let pathData = [];
  let left = 0; // The last x position / indentation

  // Iterate over each link to build up the pathData
  links.forEach((link, i) => {
    const x = link.offsetLeft - 2;
    const y = link.offsetTop;
    const height = link.offsetHeight;

    if (i === 0) {
      // The top of the first link starts at 0px along the path.
      document.linkStarts.set(link, 0);
      // Like drawing with a pen...
      // 'M'ove to the top left of the first link,
      // and then draw a 'L'ine to the bottom left
      pathData.push("M", x, y, "L", x, y + height);
    } else {
      // If the current link is indented differently than the last,
      // then come down to the current link's top before moving
      // left or right. This ensures we get 90-degrees angle at the
      // corners.
      //
      // Offset the line upward a bit if we're moving to the left
      // otherwise the line will be at the top edge of the next link
      let yPos = y;
      let yMod = 0;
      if (left > x) {
        yPos -= 8;
        yMod += 8;
      }

      if (left !== x) pathData.push("L", left, yPos);

      // Draw a line to the top left of the current link
      pathData.push("L", x, yPos);
      if (yMod > 0) pathData.push("L", x, yPos + yMod);

      // Apply the current path data to the path element
      path.setAttribute("d", pathData.join(" "));

      // Get the total length of the path now that it extends
      // to the top of this link, and store it in our linkStarts
      // WeakMap.
      document.linkStarts.set(link, path?.getTotalLength() ?? 0);

      // Draw a line to the bottom left of the current link
      pathData.push("L", x, yPos + height + yMod);
    }

    // Save the current link's x position to compare with the next
    // link
    left = x;

    // Apply the current path data to the path element again
    path.setAttribute("d", pathData.join(" "));

    // Get the length of the path that now extends to the
    // bottom of this link, and store it in our linkEnds WeakMap.
    document.linkEnds.set(link, path?.getTotalLength() ?? 0);
  });
}

function updatePath() {
  const path = document.querySelector("path.toc-marker");
  // If we have no path return
  // if (!path) return;
  const pathLength = path?.getTotalLength() ?? 0;
  const activeLinks = document.querySelectorAll("nav.toc a.active");
  let linkStart = pathLength;
  let linkEnd = 0;
  activeLinks.forEach((link) => {
    // Set linkStart to the top of the earliest active link
    linkStart = Math.min(linkStart, document.linkStarts.get(link));
    // Set linkEnd to the bottom of the furthest active link
    linkEnd = Math.max(linkEnd, document.linkEnds.get(link));
  });
  // If there are no active links, hide the path
  path.style.display = activeLinks.length ? "inline" : "none";
  // FINALLY, do the thing!
  path.setAttribute(
    "stroke-dasharray",
    `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`
  );
}
</script>

<style>
.active-toc-item {
  font-weight: bold;
}
</style>
